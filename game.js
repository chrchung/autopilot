 /**
 * Created by Christina on 2016-12-08.
 */
var app = angular.module('myApp', ['restangular', 'ui.router']);

app.directive('ngRightClick', function($parse) {
    return function(scope, element, attrs) {
        var fn = $parse(attrs.ngRightClick);
        element.bind('contextmenu', function(event) {
            scope.$apply(function() {
                event.preventDefault();
                fn(scope, {$event:event});
            });
        });
    };
});

app.controller('gameCtrl', function($scope, Restangular, $state) {
    $scope.end = 0; //0 = not ended, 1 = end state for guest, 2 = end state for registered user

    // signing up
    $scope.user = {username: null, password: null, email: null, turk: null};
    $scope.taken = false; // username is taken

    /// initialization code and global variables //////////
    $scope.score = 0;
    $scope.target = 0;

    // size of elements
    var dim = 120;

    // hospital model
    var hospital = {
        0 : [
            [149,59,63,57,157,44,36,161,18,162],
            [91,9,75],
            [126,108,128,83],
            [93,108,143,128,57,40],
            [82,92,83,2,142,25,156,120,144,157,136,128],
            [127,13,75,148],
            [33,162,18,75,40],
            [151,132,113,134],
            [96,17,145,22,101,57,92,156,83,75,40,44,136],
            [24,140,4,18],
            [6,77,160],
            [66,59,157,63,46,44,83,161,113],
            [152,17,62,22,101,57,125,83],
            [90,140,4,35,88,153,136,63,57,128,36],
            [135,57,113],
            [67,59,157,113,128,46,44,83,50,18],
            [55,108,46,106,162,57,136,40],
            [111,128,36,46,136,57],
            [14,136,128],
            [97,133,94,85,78,10,108,46],
            [58,13,75,148],
            [100,77,75,148],
            [39,59,108,113,18,83,46],
            [110,41,108,94,78,10],
            [1,84,108,75,148,160,40,57,136,50],
            [34,157,128,44]
        ],
        1:  [
            [149,59,157],
            [91],
            [126],
            [47,148,75,36,88,37],
            [33],
            [151,134],
            [139,157,123],
            [61,143,123],
            [96,17,53,36],
            [80,141,46,118],
            [138],
            [24,3,37,83],
            [6,77,160,162,40],
            [66,59],
            [152,17,42],
            [74,141,106],
            [90,57,88,128],
            [67,59,113,157],
            [115],
            [55,143],
            [97,123,85,94],
            [23],
            [100,77,75,148],
            [39,59,113,134],
            [110,123,94],
            [1,156],
            [1,160,148,75,40,136,57],
            [56,83,119],
            [34,46,123]
        ],
        2:  [
            [149,59,108,18,162,83,63,131,44,78],
            [91,9,75,148,157],
            [126,71,145,22,10,15,128],
            [93,10,143,15,128],
            [68,18,3,83,162,44,131],
            [82,145,22,136,128,57],
            [147,86,157,53,42,118,57],
            [127,75,148,3,157,162,18,78],
            [33,113,140,128,148,75,40,83],
            [151,132,134],
            [139,4,35,88,78,157],
            [61,4,140,78,143],
            [96,17,36,118,53],
            [80,8,101,92,57],
            [138,28,12,5,76,85,27],
            [24,4,140,83,37,18,78],
            [6,77,162,160],
            [66,59,113,63,157,150,44],
            [152,17,113,42],
            [74,8,101,92,57,156],
            [90,153,85,75,10,57,136,88,92,131],
            [45,86],
            [19,4,35,88,79,128,44,15],
            [154,86,87,99],
            [67,59,113,63,157,53,42,92],
            [115,86,43,109,3,42],
            [55,86,71,128,15,143,108,118],
            [111,145,22,128,15,136],
            [97,4,113,108,94,85,157,10,78],
            [58,75,148,10,37,36,143,128,88],
            [23,10,15,40],
            [100,77,148,75],
            [39,59,108,113,3],
            [110,4,73,113,108,94,85,10,78],
            [1,4,108,148,75,57,40,136,118,106],
            [89,136],
            [56,8,113,83,92,128,150,119],
            [34,78,46]
        ],
        3:  [
            [21,131],
            [149,59,18],
            [93,128,83,3],
            [33,4,140,71,3],
            [121,83,131,136,57],
            [61,140,4,143],
            [96,17],
            [24,37,3],
            [6,77,148],
            [66,59,113,153],
            [152,17],
            [90,4,32,131,36,57],
            [19,4,31,32,79,157,35,156,153,29,118],
            [67,59,157,113,153],
            [115,43,32,109,131],
            [55,108,22,51,38,4,143,18,153],
            [97,4,133,148],
            [23,143,108,18,40],
            [100,77,113],
            [39,59,3],
            [110,4,140,73,108,134,75],
            [146,131],
            [1,4,84,94,136,57],
            [56,113,38,131],
            [34,131]
        ],
        4:	[
            [149,59,63],
            [93,143],
            [82,136,128,57],
            [33,40,7],
            [151,132,134],
            [49,113,143],
            [96,112],
            [24,116,18],
            [6,77,160],
            [66,59,113,63],
            [152,112],
            [90,57],
            [64,98],
            [67,59,63,113,157],
            [30,17],
            [97],
            [65,98,108],
            [100,77],
            [39,59,113,108],
            [110],
            [155,17],
            [1,136,57,40,75,148]
        ],

        5:  [
            [149,59,131,83,118,46,106],
            [93],
            [33,148],
            [96,145,22,57,125,101,118,83,128,131],
            [24,140,4,18,158],
            [159,83],
            [6,77,18,148],
            [66,59,113,83],
            [152,101,145,22,156,125,131,128,83],
            [19,4,137,35,57,69,128,83,46,106],
            [104,131],
            [129,143],
            [67,59,113,131,83],
            [55,145,22,143,71,131,4,136,131,57,40,128,106,46,148,130],
            [39,59,113,3,83],
            [110,108,52,16,113,83,134],
            [1,148,118],
            [56,57,92,122,83,119,113,128,46]
        ],
        6:  [
            [149,59,18,83,3,44,131,15],
            [91,140],
            [126],
            [93,143,15],
            [68],
            [147,73,57,153,118],
            [127,78,75,148],
            [33,16,113,40],
            [151,132,113],
            [139,4,35,137,78],
            [121,44,92,156,83,15],
            [61,4,140,143,78],
            [96,17,53],
            [80,8,92],
            [138,20,117,26,54,75,148,85,32],
            [72,136,118],
            [24,4,140,37,78,18],
            [6,77,160,162],
            [66,59,113,83,157,153,156,105,57,128],
            [152,17,42],
            [74,8,92,156],
            [90,88,36,153,131,113],
            [19,4,35,88,79,103,53,118,15],
            [67,59,153,83,156,92,113,157,118],
            [115,43,109,3,48,57,153,136],
            [55,73,57,40,136,128,108,153,118],
            [111,145,22,101,128,15],
            [97,133,94,85],
            [58,10,37,36,88],
            [23,15],
            [100,77],
            [39,59,162,83,108,3,113],
            [110,16,73,85],
            [1,84,75,160,148,108,40,57,157,136],
            [56,20,117,26,54,32,57,113,156,105,92,119],
            [34,70,114,78,131]
        ],
        7:  [
            [149,59,18,83],
            [91,9],
            [126,22,51],
            [93,128,143],
            [147,73,83,156,36,144,136,57],
            [127,13],
            [33,4,83],
            [151,10,78],
            [96,17,102,118],
            [138,20,117,26,54],
            [72,36,156],
            [24,4,140,95,18],
            [6,77,162],
            [66,59,113,156,92],
            [152,17,102,92],
            [90,4,88,36,131],
            [19,36,4,35,88,153,118,128],
            [67,59,92,113],
            [115,43,109,3,136],
            [55,143,36,73,128,108,143],         //   [55,143,36,73,128,108,143],
            [97,133,85,78,10],
            [58,13],
            [100,77],
            [39,59,113],
            [110,124,73,75,10,78],
            [1,4,148,160],
            [56,105,119,83]
        ]
    };


    var gasBoiler = {
        0: [
            [11,159],
            [124,159],
            [16,27,103,6,109],
            [5,27,61,69,31,70,103,76,18,109],
            [145,159,103,77],
            [25,159,119],
            [100,159,72],
            [90,159],
            [155,159],
            [78,94,18],
            [89,159],
            [149,103],
            [48,72,35],
            [154,72],
            [161,159],
            [146,159],
            [9,159]
        ],
        1: [
            [124,32,35,159],
            [155,35,159],
            [146,83,159],
            [145,35,159,103,153],
            [161,35,159,153],
            [90,133,159],
            [25,133,159,119],
            [26,35],
            [16,109,6,53,103,27],
            [5,109,53,95,103,27,61,69,31,18],
            [43,35,72,159],
            [8,12],
            [78,94,95,101,18],
            [48,72],
            [154,72],
            [149,103]
        ],
        2: [
            [124,32,35,159],
            [155,35],
            [146,83,159],
            [145,35,103,153,159],
            [161,35,153,159],
            [90,133,159],
            [25,133,159,119],
            [26,35],
            [16,109,103,53],
            [5,109,103,31,53,18,95,76,69],
            [149,103],
            [78,18,95,94],
            [48,72],
            [154,72],
            [43,72,159,35],
            [8,12]
        ],
        3: [
            [124,32,35,159],
            [155,35,159],
            [146,83,159],
            [145,35,77,159,103,153],
            [161,35,159,153],
            [90,133,159],
            [25,133,159,119],
            [26,35],
            [5,69,53,31,95,70,27,18,103,61,109],
            [11,159],
            [8,12,159],
            [43,35,72,159,64],
            [16,53,27,103,6,109],
            [89,159],
            [78,94,95,18],
            [48,72,35],
            [154,72],
            [100,103],
            [9,159]
        ],
        4: [
            [124,32,35,159],
            [155,35],
            [146,83,159],
            [145,35,103,159,153],
            [161,35,159,153],
            [90,133,159],
            [25,133],
            [26,35],
            [5,70,103,109,18,69,53,76],
            [78,101,18,94],
            [149,103],
            [16,103,109,6,53],
            [11,159],
            [89,35,64,159],
            [8,12],
            [9,159]
        ],
        5: [
            [124,32,35,159],
            [155,35,159],
            [146,83,159],
            [145,35,159,153,103,77],
            [161,35,153,159],
            [90,133,159],
            [25,133,159,119],
            [26,35],
            [11,159],
            [9,159],
            [43,64,159,72,35],
            [5,61,27,95,70,69,103,76,109,31,18],
            [78,101,95,94,18],
            [8,12],
            [16,27,103,6,109],
            [100,72,35],
            [154,72],
            [149,103]
        ],
        6: [
            [124,32,35,159],
            [155,35,159],
            [146,83,159],
            [145,35,159,103,77,153],
            [161,35,159,153],
            [90,133,159],
            [25,133,159,119],
            [26,35],
            [5,61,76,18,31,69,27,103,109,70,53],
            [11,159],
            [9,159],
            [43,64,159,72,35],
            [89,159],
            [78,18,101,94],
            [8,159,12],
            [16,6,27,103,109,53],
            [100,35,72],
            [24,103],
            [154,72]
        ],
        7: [
            [124,32,35,159],
            [155,35,159],
            [146,83,159],
            [145,35,159,103,77,153],
            [161,35,159,153],
            [90,133,159],
            [25,133,159,119],
            [26,35],
            [149,103],
            [16,103,109,53],
            [5,103,61,109,31,95,76,53,70],
            [78,95],
            [43,35,72,159,64],
            [8,12,159],
            [48,72,35],
            [154,72],
            [11,159],
            [9,159],
            [89,159]
        ],
        8: [
            [124,32,35,159],
            [155,35],
            [146,83,159],
            [145,35,159,153,103,77],
            [161,35,159,153],
            [90,133,159],
            [25,133,119,159],
            [26,35],
            [5,69,103,31,76,18,61,27,70,109,95],
            [48,35],
            [24,103],
            [16,103,6,27,109],
            [78,18,101,95],
            [11,159],
            [8,159],
            [100,159],
            [9,159],
            [43,64,159]
        ],
        9: [
            [124,32,35,159],
            [155,35,159],
            [146,83,159],
            [145,35,159,153,103,77],
            [161,35,153,159],
            [90,133,159],
            [25,133,159,119],
            [26,35],
            [16,27,6,103,109,53],
            [5,27,31,18,103,76,109,61,70,53,69],
            [100,159,64,35,72],
            [48,35,72],
            [24,159],
            [9,159],
            [78,101,18,94],
            [8,12,159],
            [154,72],
            [89,159],
            [149,103]
        ],
        10: [
            [124,32,35,159],
            [155,35,159],
            [146,83,159],
            [145,35,77,159,103,153],
            [161,35,159,153],
            [90,133,159],
            [25,133,159,119],
            [26,35],
            [43,35,72,159,64],
            [8,12,159],
            [5,76,103,53,95,27,109,69,61,18,70],
            [149,103],
            [16,103,53,27,109,6],
            [78,95,101,18,94],
            [11,159],
            [89,159],
            [48,72,35],
            [154,72],
            [100,159]
        ],
        11: [
            [124,32,35,159],
            [155,35,159],
            [146,83],
            [145,35,77,159,103,153],
            [161,35,159,153],
            [90,133,159],
            [25,133,159,119],
            [26,35],
            [78,94,18,101,95],
            [16,109,27,103,6,53],
            [5,109,27,61,18,76,69,103,70,53,31,95],
            [100,159,64,72,35],
            [11,159],
            [8,12,159],
            [149,103],
            [9,159],
            [48,72,35],
            [154,72],
            [89,159]
        ]
    };


    var random = {
        0: [
            [22,40,12,70,102,17,149],
            [51,34,10,148,97,39,45],
            [125,142,20,76],
            [107,12,31,81,17],
            [40,158,9],
            [28,151,155,13],
            [43,93,25,74,113,51,78,13],
            [93,68,70],
            [126,53,154,12,46,78,7],
            [25,135,71],
            [6,130,157,19],
            [98,56,141,105,116,32,75],
            [49,81,102,67,141,19,9,39],
            [126,70,8,143,5,127,55,153,80],
            [120,40,8,99,106],
            [109,8,77,104,111,87,19,18],
            [54,69,16,132,104,10,146,103,42],
            [140,102,19],
            [72,90,112,11,160,37,13,7],
            [117,91,149],
            [156,139,137,4],
            [95,132,74,157,70,35],
            [54,30,43,53,46,11,155,76],
            [102,159],
            [68,43,134,56,34,137,103,86,55],
            [44,65,40,63,148,152,159],
            [84,105,91,137],
            [49,41,34,36,97,161],
            [109,82,57,8,3,45,60,62],
            [54,16,100],
            [125,31,151,36,19,17,47],
            [120,14,72,16,61,46,146,4],
            [94,81,36,19,97,32,7,47],
            [22,126,148,17,60],
            [114,2,74,135,122,7],
            [54,58,34,15,29,146,5,147]
        ],
        1: [
            [50,151,91,153],
            [27,156,157,15,78],
            [6,43,132,135,67],
            [96,62,7],
            [22,90,40,117,67,148],
            [120,131,132,151,15,3,20,153,35],
            [65,8],
            [16,125,134,111,61,9,45,159],
            [2,54],
            [98,99,101],
            [134,146,64,148,21],
            [124,49,114,131,102,86,91,108,62],
            [133,46,146,148],
            [63,152],
            [141,86,152,75,60],
            [1,72,40,134,148,64,55,127],
            [92,54,150,25,70,83,118,13,159],
            [120,66,77,61,67,75],
            [109,53,67],
            [51,17],
            [79,120,85,154,11,99,101,9,147],
            [92,132,57,104,73,32,80],

        ],
        2: [
            [121,93,65,57,146,67,20,149,75],
            [126,53,40,157,46,119,160],
            [124,156,40,8,102,149,59],
            [2,150,8,60],
            [1,82,27,72,43,102,9],
            [129,107,22,28,154,112,67,5,45],
            [88,120,131,142,134,46,19,20,3],
            [65,28,70,100,158,91],
            [69,151,11,29],
            [82,10],
            [30,58,77,117,4,97,152],
            [27,135],
            [98,126,91,153],
            [95,51],
            [131,63],
            [130,98,131,78,122,152,62,75],
            [124,131,52,40,31,143,118],
            [94,57,41,142,117,67,152,21],

        ],
        3: [
            [68,31,11,105,63,149,152],
            [109,107,105,159,7],
            [133,55,17,75],
            [98,22,101,153],
            [58,157,142,73,102,99,59,13,159],
            [135,64,161,80],
            [24,105,148],
            [85,53,70,89,9,152],
            [130,69,125,99,11,9,128,59],
            [79,34,135,10,152,32],
            [94,68,145,36,67,110],
            [156,150,140,46,101],
            [43,65,70,149],
            [54,50,40,132,67],
            [43,118],
            [140,29,37],
            [129,98,90,40,125,11],
            [90,22],
            [88,55,47],
            [112,151,142],
            [18,136,7],
            [49,22,156,85,16,134,77,139,128],
            [79,115,93,41,66,102,105,9,7]
        ],
        4: [
            [68,45],
            [139,7],
            [129,25,48,61,111,101],
            [14,131,52,36,78,155,108],
            [131,151,138],
            [1,79,124,94,85,16,111,62],
            [120,50,46],
            [50,139,108],
            [109,107,126,68,140,158,149,13,108],
            [145,51,59],
            [120,82,115,126,77],
            [151,8,101,108],
            [79,114,70,45,60],
            [23,39],
            [19,18],
            [61,155,89,127,39],
            [74,61],
            [79,132,144,46,83,116,47],
            [72,105],
            [120,78,117,105,64,55,37,21],
            [90,53,34,4,83],
            [91,9,152],
            [130,50,63],
            [109,30,72,66,67,4,122,21,7],
            [88,95,157,8,160,63],
            [69,53,34,77,8,91,47],
            [69,84,46],
            [131,23,142,34,81,46,119,62],
            [121,68,40,113,19,116],
            [85,13]
        ],
        5: [
            [84,148,159,62],
            [90,141],
            [120,158],
            [22,143,87,148,153,116],
            [104,46,155],
            [115,48,142,138,110],
            [10,55],
            [129,54,46,78,97,152],
            [96,78],
            [121,95,28,12,15,111,127,128,62],
            [84,121,69,24,141,20,149],
            [84,144,146,155,5,160],
            [88,58,65,154,51,36,75],
            [114,1,133,31,135,11,139,78,91],
            [94,123,25,24,11,111,153,39,152],
            [88,54,25,132,41,12,11],
            [16,91],
            [27,23,142,55,153,47],
            [1,98,50,68,38,145,80,159],
            [1,25,158,4],
            [124,48,96,61,13],
            [1,152,7],
            [114,121],
            [129,84,126,145,41,12,64],
            [107,22,93,70,31,122],
            [121,25,132,66,113,70,42,153],
            [27,142,12,81,71,63,75],
            [24,40,132,12,81,117,64,118],
            [93,70],
            [22,95,139],
            [23,65,157,102,139,103,59],
            [16,135,134,36,122,13,32,7],
            [125,158,119],
            [109,121,40,100,10,3,161,152,60],
            [124,94,120,134,101,80],
            [88,123,12],
            [98,24,53,28,11,141,17,118],
            [135,70,63]
        ],
        6: [
            [123,23,132,73],
            [54,150,5,60],
            [1,109,54,142,46,29,105],
            [25,41,36,111,141,87,71],
            [44,151,73,104,146,67,141,103,160],
            [84,53,74,134,36,61,101,149],
            [130,40],
            [14,53,103,19,20,45],
            [101,59],
            [49,130,52,145,57,138,153,147],
            [49,12,81,61,105,137,110,60],
            [123,90,4],
            [92,120,34,36],
            [74,81,61,19,161,152],
            [68,135],
            [6,94,28,112,141,148,97,110,60],
            [1,23,151,9],
            [28,151,32],
            [150,22,93,100,29,63,64,136],
            [88,16,42,97],
            [94,145,142,5,122,42],
            [88,27,115,131,113,81,64],
            [2,65,81,77,19,63,136,149],
            [54,16,132,74,12,96,81,62],
            [93,12,51,4,136,60]
        ],
        7: [
            [115,16,140,119,18,42,118,39],
            [27,154],
            [49,98,58,23,31,81,108],
            [6,155,89,21],
            [98,25,99,87,149,152,75],
            [139,78],
            [77,73,36,137,148,45,80,21],
            [129,126,65,160],
            [14,115,53,142,76,127,149,32,59],
            [1,65,38,56,18,21],
            [22,10,36,99,3],
            [44,6,29,137,63,83],
            [92,131,53,125,135,56,111,122],
            [49,95,133],
            [31,8,61],
            [49,131,46,139,78,4,20,127,116],
            [82,16,51,149,161,106,39,159],
            [46,105,91],
            [109,26,131,25,19,101,149,118],
            [92,79,107,27,40,38,48,76],
            [98,122,3],
            [1,156,133,155,83,147],
            [129,49,6,48,77,20,62],
            [130,73,148]
        ],
        8: [
            [126,36,87,119,19,4,122,21],
            [16,57,36],
            [1,11,147],
            [109,124,150,154,151,67,91],
            [92,157,63,7],
            [82,115,72,131,10],
            [30,156,24,75],
            [17,62],
            [30,133,48,149],
            [30,74,154,8,96,11,4],
            [51,34,21],
            [115,95,93,57,134],
            [53,140,10,63,13],
            [79,54,68,159],
            [53,65,35],
            [151,101],
            [125,87,147,7],
            [58,121,43,74,125,51,102],
            [94,51,144,155,118],
            [107,56,157,29,75],
            [105,9],
            [49,2,58,144,46,91,149,59,47],
            [27,125,134,151,86],
            [123,131,28,158,78],
            [98,95,134,12,96,46,155,62],
            [58,85,68,66,51,61,17],
            [114,121,112,38,10,29],
            [124,57,154,60],
            [150,131,9],
            [131,51],
            [81,11,83,7],
            [22,43,4,122,55],
            [98,123,5,153,152,110],
            [44,123,22,14,74,144,19,63,62]
        ],
        9: [
            [27,24,155],
            [111,32],
            [49,22,69,57,81,78],
            [14,121,24,12,15,86,7],
            [120,123,85,145,157,80,47],
            [44,121,134,4,32,39,35],
            [123,69,24,132],
            [36,63,127],
            [2,99,4],
            [54,16,104,139,35],
            [52,16,63,76],
            [113,132,155,18,32],
            [44,58,22,81],
            [6,65,41,34,63,160,35],
            [79,114,98,26,29,102,97,55],
            [124,22,156,23,93,38,117,148,55],
            [120,140,148,4,110,152,108,7],
            [135,140],
            [135,97],
            [1,123,57,56,3,4,136,13],
            [44,142,70,55,21]
        ]
    };

    var randomTight = {
        0: [
            [129,77,134,89,112,35,36],
            [85,117,26,151,37,127,75,28,133],
            [129,131,156,114,71,144,13,130,44,160,50,150,67,151,142,41],
            [27,87,108,43,159,80,144],
            [131,108,91,159,18,105,59,24,94,11],
            [64,25,68,107,143,139,51,162,154,151,69,95,106],
            [40,131,25,156,62,92,65,128,16,13,130,69,36],
            [134,96,88,38,155,67,43,90],
            [45,102,143,80,28,2],
            [52,156,43],
            [101,77,103,52,73,117,72,69,28],
            [155,81,105,139],
            [101,136,71,1,90,115,139,39,79,108,26,126,2],
            [101,79,123,83,20],
            [64,117,38,114,62,128,4,51,149,108,123,111,137,41],
            [64,131,88,81,28],
            [64,78,92,159,125,1],
            [76,63,71,90,111,14,113,3],
            [88,136,117,91,100,1,81,41,82,3],
            [64,156,136,91,37,78,102,35,75,2],
            [129,25,38,128,16,144,82,103,89,91,142,36,106],
            [12,27,52,112,138,69,1,54],
            [73,76,45,37,18,102,105,65,41,106,4],
            [110,19,75,144,13,82],
            [27,62,111,32,94],
            [77,131,25,120,114,19,1,75,152,137,39,94],
            [73,136,67,123,141,152,28,20]
        ],
        1: [
            [103,73,125,141,139],
            [64,40,149,67,43,1,59,16,14,130],
            [107,132,141,97],
            [76,50,88,7,37,8,24,113,4,44,3],
            [12,52,149,127,152,105,95,97],
            [160,96,79,85,45,72,92,105,128,28,14,13],
            [27,162,108],
            [124,48,100,17,90,16,54],
            [108,63,155,1,65,14,4,11],
            [88,120,7],
            [120,28,83],
            [45,66,48,100,78,17,28,144,153,150,26,127,137],
            [131,78,62,127,137,106],
            [12,66,132,69,93,115],
            [148,131,162,134,79,88,117,138,82],
            [101,110,156,124,45,43,1,90,39,94,52,108,155,125,97],
            [76,97],
            [101,66,92,37,80,123,24,4],
            [27,25,117,37,18,17,65],
            [77,25,124,136,117,38,159,95,97,83,41,20,2],
            [112,97,144],
            [129,160,87,156,66,15,83,144],
            [48,132,68,152,8],
            [129,48,45,114,90,115,139,52,154,26,81,105,41],
            [131,25,156,71,92,152,141,128,44,54,3,79,89,102,97],
            [101,148,77,107,67,17,125,81,95,13,137],
            [110,66,132,62,71,1,128,65,14,144,32,108,93,83,20],
            [103,45,63,43,106,130,20,51],
            [110,26,117,159,16,32,2]
        ],
        2: [
            [148,114,90,15,115],
            [64,110,128,74,14,133,153,72,151,7,19,105,126,59,95],
            [25,132,37,138,75,35,39,3,148,91,155,151,69,126,83],
            [77,103,101,110,89,36,59,3,11],
            [110,134,25,156,43,102,35,74],
            [64,136,132,92,159,90,8,16,133,82,94,89,155,125,111],
            [101,88,66,45,48,68,113,4,51,150,91,7,105,137,20],
            [88,63,114,117,78,152,33,139,32,153,79,72,155,127,41],
            [64,25,127,36,128,139,13],
            [40,96,48,43,100,17,75,35,152,128,8,54,127,24,41],
            [114,38,14,139,113,44,162,112,91,7,151,125,36,59],
            [160,73,66,67,36,32],
            [101,131,76,132,138,33],
            [59,39,54],
            [64,40,76,38,17,35,141,152,33,115,14,51,153,112,67],
            [85,132,38,92,37,142,75,1],
            [101,129,87,124,71,17,143,138,162,52,154,89,125,81,24],
            [71,105,106],
            [162,63,107,97],
            [62,69,75,81,8,133]
        ],
        3: [
            [153,76,43,54],
            [160,134,38,92,142,80,141,81,44],
            [101,153,156,120,112,78,127,59,126,93,111,11],
            [89,138,113],
            [160,154,91,132,19,75,33,8,16,133,139,144],
            [153,101,103,129,149,132,155,143,97,13,32],
            [64,107,75,33],
            [96,72,95,3],
            [103,12,63,68,43,18,125,113,32,20,3],
            [154,124,159,139,4],
            [76,120,100,143,141,33,8,14,39,94,112,150,125,81],
            [131,124,76,63,48,43,159,75,153,127,69,59,106],
            [114,68,107,92,97,74],
            [73,127,1,74,15],
            [52,108,92,151,1,36,95,14,13,4,39,106],
            [64,12,150,26,132,18,143,128,97,74,2],
            [76,75,20,44,39,130,51],
            [71,159,106],
            [129,25,156,136,120,107,71,18,139,133,32,154,24,20,11],
            [156,150,69,159,127,93,4],
            [87,76,132,155,59,113,51,94],
            [77,148,85,134,76,92,33,4,51],
            [12,77,149,45,63,68,142,65,28,13,32],
            [101,156,62,67,75,97,111,14,139,144],
            [153,40,160,79,71,90,74,137,44,32,11],
            [64,52,112,48,63,38,37,125,74,14,94,82]
        ],
        4: [
            [12,25,68,71,92,43,74,113,39,94,91,151,41],
            [69,113,32],
            [40,73,124,156,63,159,90,160,7,19,111,41,20],
            [27,154,149,108,45,91,62,102,19,152,8,28],
            [101,52,27,162,76,62,18,65,16,41,32,51],
            [79,149,134,156,132,37,67,18,95,139],
            [27,88,7,92,67,17,123,95,133,14],
            [148,153,129,134,149,73,156,76,72,81,137,51],
            [96,66,72,17,127,35,141,65,128,111,41,2],
            [52,160,40,79,76,89,45,91,126,51],
            [101,110,89,50,114,155,1,139,113],
            [110,87,134,136,117,43,17,143,152,128,144,112,24],
            [131,52,45,136,151,130,94],
            [129,79,156,108,26,68,19,127,65,74,115],
            [134,96,48,114,38,62,138,143,128,65,33,28,54,52],
            [108,26,155,151,69,18,141,14,83],
            [50,88,68,19],
            [27,25,88,62,17,35,15,28,4,54,59,24,137],
            [52,154,108,72,128],
            [64,156,72,125,141,105],
            [72,71,65],
            [160,79,89,143,35,36,123,8,95,83,39,82],
            [87,136,38,75,152,90,16,115,113,103,72,7,67,59,41],
            [160,110,89,120,127,81,32],
            [110,40,134,76,48,115,113,144,41,39,54],
            [76,117]
        ],
        5: [
            [156,117,83],
            [64,91,123,74,113],
            [12,45,132,75,94],
            [79,73,67,138,141,81,144,41,39,94,2],
            [79,114,100,78,43,75,33,111,137,4],
            [101,27,63,67,69,18,8,94],
            [96,156,124,69,35,125,80,95],
            [14,28],
            [96,69,113],
            [96,73,143,59,16,144],
            [129,77,131,40,136,37,92,159,33,128,139,130,82,148,154,20],
            [131,89,66,48,26,37,127,138,1,123,2,11],
            [64,25,138,16,115,39,150,67,155,69,81,59,97,83],
            [79,26,117,141,28],
            [162,89],
            [38,91,7,62,138,152],
            [12,88,100,35,113,79,151,125,123,126,97,83,41],
            [131,25,114,43,37,141,44,26,151,19,142,36,11],
            [142,125,126,15,139,13,4,44,2],
            [73,66,71,37,75,80,65,13,103,112,151,67,69,137],
            [148,129,40,88,67,11],
            [101,79,65,95,8,44],
            [25,88,112,151,78,37,127,19,90,126],
            [149,67,7,62,90,130],
            [107,123],
            [27,79,124,108,120,18,65,11]
        ],
        6: [
            [155,62,127,128,97,8,28,115,13],
            [131,149,151,17,59,137,94,11],
            [129,142,141],
            [27,66,37,43,155,1,126,95,115,144],
            [68,37,75,35],
            [77,129,64,134,156,73,68,35,65,139,54,79,97,111,2],
            [52,134,124,7,71,159,142,36,105,28,139,3],
            [87,150,69,41],
            [103,154,85,73,26,8,16,133,14],
            [12,103,68,114,78,80,126,59,113],
            [154,150,117,132,62,1,123,115,130],
            [52,27,156,159,128,115,82],
            [12,131,27,76,66,114,141,16,14,51,153,7,137],
            [64,77,85,112,67,143,80,90,133,14],
            [96,71,159,35,90,133,113,130,94,36,81,97,41],
            [124,66,150,72,71,75,1,152,33,126,105],
            [136,114,107,43,159,141,94],
            [25,45],
            [64,114,141,3],
            [27,88,66,117,38,19,141,28,137,20,51],
            [129,76,63,71,32,20,51],
            [101,27,134,76,68,71,16,74,54,94,149,112,150,93],
            [64,101,48,78,17,35,32,39,44,102,125,142,123],
            [85,156,120,72,91,71,35,90,59,133,83,113],
            [67,127],
            [154,134,35,141,16,130,11,3],
            [113,20]
        ],
        7: [
            [114,35],
            [77,156,78,139,11],
            [120,117,62,80,133,144,51,148,103,154,7,83,20],
            [131,95],
            [87,96,73,48,132,159,65,16,51,79,151,127,19,93,11],
            [103,40,27,134,85,79,63,38,7,69,111,11],
            [27,76,45,17,138,152,90,65,59,137,54],
            [129,134,25,88,63,66,75,15,113,144,160,69,142],
            [110,25,112,142,141,33,95,4,11],
            [110,134,156,150,92,1,80,106,3],
            [40,96,45,114,100,43,17,144,32,3,79,59,95],
            [40,110,136,62,159,143,139,133,14,111],
            [64,96,88,124,45,48,107,100,71,37,128,15,148,2],
            [50,144],
            [12,162,88,50,45,108,114,37,102,18,126],
            [64,87,76,66,120,17,81,13,94],
            [40,76,124,92,1,8,28,91,102,105,81,83,11],
            [131,117,62,80,133,44,130,82,72,105,97,137,11],
            [129,131,76,124,69,59,16,24,139,83],
            [77,40,110,124,76,78,1,115,44,82,3,51,69,127,83,11],
            [134,102,35,81,20],
            [154,88,143,159,152,97,82],
            [40,110,96,76,68,78,8,16,133,94,50,126,97],
            [101,129,162,132,67,123,16,106],
            [64,40,124,88,76,138,65,13,51,26,67,127,19,95,137],
            [89,138,35,123,128,144,54,51]
        ],
        8: [
            [66,72,159,113],
            [101,64,85,114,43,62,18,128,153,112,95,83,2],
            [110,85,50,63,72,68,38,67,102,141,126,137],
            [85,156,150,141,36,139,111,106],
            [12,27,134,88,78,1,128,28,149,154,108,111,20],
            [27,72,26,142,123,141,130,32],
            [148,134,76,38,18,159,152,105,133],
            [87,134,88,92,159,141,13,113,32,4,149,7,111,106],
            [153,103,160,40,88,120,72,80,95,74,51],
            [73,107,78,100,1,133,39,130,4,51,72,69,59,95,83],
            [43,151,16],
            [52,110,79,154,91,132,100,62,59,39,54],
            [64,87,76,68,100,152,65,39,130,150,112,155,111,106,20],
            [87,50,150,17,18,33,16,83,82],
            [162,96,88,136,78,92,11,94],
            [67,81,90,8,115],
            [40,110,149,134,50,150,71,35,59,14,51],
            [91,151,7,54],
            [7,143,35,105],
            [134,96,41],
            [148,12,156,136,155,19,127,75,33,24,137,3]
        ],
        9: [
            [148,162,88,78,18,127,93,28,113],
            [131,88,124,92,71,43,143,44,130,51,91,155,142,24,106,20],
            [64,85,76,48,78,17,125,33,126],
            [129,73,37,18,1,75,90,44,51,162,91,7,155,127,69],
            [101,12,87,114,78,127,123,33,97,130,3],
            [85,68,78,138,141,133,115,113,72,105,93,97,83],
            [96,73,92,65,115,14,130,4,44,155,24,137,11],
            [52,76,45,150,108,18,142,128,105,24,82],
            [154,127],
            [110,40,68,18,75,128,44,130,51,154,149,26,127,81,95],
            [85,25,117,43,115],
            [26,35],
            [162,120,150,38,80,106],
            [153,134,68,17,80,97,113,51],
            [134,25,96,85,76,45,136,43,138,33,28,162,112],
            [153,87,149,124,48,120,45,132,8,94],
            [134,50,76,112,66,92,17,75,123,93,97,94],
            [25,66,120,95,111,144,39,130,2],
            [148,27,162,154,136,26,62,19,139],
            [148,110,76,26,72,37,17,35,115,13,39,3],
            [160,38,97],
            [87,27,120,150,132,43,151,102,83,144],
            [12,63,127,1,125,65,126,16,41,51],
            [160,124,132,91,97,15,106],
            [52,48],
            [134,1,11],
            [110,149,108,63,117,125,128,8,133,28,32,106]
        ]
    };

    // keep track of current selected element
    // and position and selected element (== pos in model of
    // selected element or -1 if nothing)
    // pos == position of element currently in view
    var hospitalPos = {
        0: {pos: 0, selected: -1, reorder: -1},
        1: {pos: 0, selected: -1, reorder: -1},
        2: {pos: 0, selected: -1, reorder: -1},
        3: {pos: 0, selected: -1, reorder: -1},
        4: {pos: 0, selected: -1, reorder: -1},
        5: {pos: 0, selected: -1, reorder: -1},
        6: {pos: 0, selected: -1, reorder: -1},
        7: {pos: 0, selected: -1, reorder: -1}
    };

    var gasBoilerPos = {
        0: {pos: 0, selected: -1, reorder: -1},
        1: {pos: 0, selected: -1, reorder: -1},
        2: {pos: 0, selected: -1, reorder: -1},
        3: {pos: 0, selected: -1, reorder: -1},
        4: {pos: 0, selected: -1, reorder: -1},
        5: {pos: 0, selected: -1, reorder: -1},
        6: {pos: 0, selected: -1, reorder: -1},
        7: {pos: 0, selected: -1, reorder: -1},
        8: {pos: 0, selected: -1, reorder: -1},
        9: {pos: 0, selected: -1, reorder: -1},
        10: {pos: 0, selected: -1, reorder: -1},
        11: {pos: 0, selected: -1, reorder: -1}
    };

    var randomTightPos = {
        0: {pos: 0, selected: -1, reorder: -1},
        1: {pos: 0, selected: -1, reorder: -1},
        2: {pos: 0, selected: -1, reorder: -1},
        3: {pos: 0, selected: -1, reorder: -1},
        4: {pos: 0, selected: -1, reorder: -1},
        5: {pos: 0, selected: -1, reorder: -1},
        6: {pos: 0, selected: -1, reorder: -1},
        7: {pos: 0, selected: -1, reorder: -1},
        8: {pos: 0, selected: -1, reorder: -1},
        9: {pos: 0, selected: -1, reorder: -1}
    };


    var randomPos = {
        0: {pos: 0, selected: -1, reorder: -1},
        1: {pos: 0, selected: -1, reorder: -1},
        2: {pos: 0, selected: -1, reorder: -1},
        3: {pos: 0, selected: -1, reorder: -1},
        4: {pos: 0, selected: -1, reorder: -1},
        5: {pos: 0, selected: -1, reorder: -1},
        6: {pos: 0, selected: -1, reorder: -1},
        7: {pos: 0, selected: -1, reorder: -1},
        8: {pos: 0, selected: -1, reorder: -1},
        9: {pos: 0, selected: -1, reorder: -1}
    };

    // Randomly pick a level
    var randLev = Math.random();
    if (randLev <= 0.25) {
        var level = 1;
        var positions = hospitalPos;
        var models = hospital;
        $scope.modelNames = [0, 1, 2, 3, 4, 5, 6, 7];
    } else if (randLev > 0.25 && randLev <= 0.50) {
        var level = 2;
        var positions = gasBoilerPos;
        var models = gasBoiler;
        $scope.modelNames = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
    } else if (randLev > 0.50 && randLev <= 0.75)  {
        var level = 3;
        var positions = randomTightPos;
        var models = randomTight;
        $scope.modelNames = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    } else {
        var level = 4;
        var positions = randomPos;
        var models = random;
        $scope.modelNames = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    }

    models = mapModels();
    $scope.models = models;
    $scope.fake = true; // to specify whether level is fake level. not used at the moment.
    $scope.leeway = 1.0; // not used at the moment
    // names of each model
    $scope.modelNames = shuffle($scope.modelNames); // randomize the order for which models appear in game
    $scope.positions = positions;

    /// initial solution
    var initialGroups = [];
    var seedType = null;
    var prevSeeds = [];
    var startTime = (new Date()).getTime();
    var initialScore = 0;

    $scope.tutorial = {numTutorials: 4, show: true, state: 0, attempts: 0, sucAttempts: 0, info: {
        0: {numStates: 5, highlight: false, friends: false, checks: false, initialGroups: [], seed: '0_1'},
        1: {numStates: 1, highlight: true, friends: false, checks: false, initialGroups: [], seed: '1_1'},
        4: {numStates: 1, highlight: true, friends: true, checks: false, initialGroups: [["0_10","1_12","2_16","4_8","6_17","7_12"],["1_23","2_32","3_19","4_18","5_14","6_31","7_23","0_22"],["0_24","2_34","3_22","4_21","5_16","6_33","7_25"],["0_7","1_5","2_9","4_4","6_8"],["0_11","1_13","2_17","3_9","4_9","5_7","6_18"],["1_8","6_12","2_12","3_6","7_8"],["0_19","1_20","2_28","3_16","4_15","6_27","7_20"],["6_19","2_18","1_14","3_10"],["2_3","4_1","5_1","6_3","7_3"],["0_9","4_7","5_4","6_16","7_11"],["1_7","2_11","3_5","6_11"],["0_23","1_24","2_33","3_20","4_19","5_15","6_32","7_24"],["0_13","1_16","3_11","4_11","6_21","7_15"],["0_16","1_19","2_26","3_15","4_2","6_25","7_19","5_13"],["0_15","5_12"],["0_20","1_3","2_29","6_28","7_21"],["3_13","7_13","6_23"],["1_18","2_25","3_14","6_24","7_18"],["0_25","2_22","3_12","6_22","7_16"],["0_5","6_6","7_5"],["1_28","2_37","3_24","6_35"],["1_2","6_2"],["2_27","0_18","6_26"],["1_21","2_30","6_29"],["2_10","6_9","1_6"],["2_19","6_20","1_25"],["1_11","3_7"],["2_15","3_3","6_7","7_6","0_6"],["6_14","7_9"],["2_13","6_13"],["0_3","4_3","2_8"],["2_6","6_5","0_4","7_4"],["1_4","5_2"],["2_35","6_15","7_10"],["7_2","2_2"],["4_5","5_11"],["4_16","3_17"],["2_20","1_26"],["2_7","7_7"],["4_10","7_14"],["2_14","1_10"],["5_6","3_8"],["2_1","6_1","0_1","1_1","7_1"],["5_10","3_21"],["5_9","1_15","0_17"],["1_9","5_0"],["6_4","3_0","2_4"],["4_6","0_12","5_3"],["4_20","0_8","6_10","5_8","2_5","3_4"],["3_2","0_2","5_5"],["0_0","1_0","2_0","3_1","4_0","6_0","7_0"],["1_17","2_24","4_13","7_17"],["0_14","1_27","2_36","3_23","5_17","6_34","7_26"]], seed: '0_21'},
        7: {numStates: 1, highlight: true, friends: true, checks: true, initialGroups: [["0_21","1_22","2_31","3_18","4_17","6_30","7_22"],["0_10","1_12","2_16","4_8","6_17","7_12"],["1_23","2_32","3_19","4_18","5_14","6_31","7_23","0_22"],["0_24","2_34","3_22","4_21","5_16","6_33","7_25"],["0_7","1_5","2_9","4_4","6_8"],["0_11","1_13","2_17","3_9","4_9","5_7","6_18"],["1_8","6_12","2_12","3_6","7_8"],["0_19","1_20","2_28","3_16","4_15","6_27","7_20"],["6_19","2_18","1_14","3_10"],["2_3","4_1","5_1","6_3","7_3"],["0_9","4_7","5_4","6_16","7_11"],["1_7","2_11","3_5","6_11"],["0_23","1_24","2_33","3_20","4_19","5_15","6_32","7_24"],["0_13","1_16","3_11","4_11","6_21","7_15"],["0_16","1_19","2_26","3_15","4_2","6_25","7_19","5_13"],["0_15","5_12"],["0_20","1_3","2_29","6_28","7_21"],["3_13","7_13","6_23"],["1_18","2_25","3_14","6_24","7_18"],["0_25","2_22","3_12","6_22","7_16"],["0_5","6_6","7_5"],["1_28","2_37","3_24","6_35"],["1_2","6_2"],["2_27","0_18","6_26"],["1_21","2_30","6_29"],["2_10","6_9","1_6"],["2_19","6_20","1_25"],["1_11","3_7"],["2_15","3_3","6_7","7_6","0_6"],["6_14","7_9"],["2_13","6_13"],["0_3","4_3","2_8"],["2_6","6_5","0_4","7_4"],["1_4","5_2"],["2_35","6_15","7_10"],["7_2","2_2"],["4_5","5_11"],["4_16","3_17"],["2_20","1_26"],["2_7","7_7"],["4_10","7_14"],["2_14","1_10"],["5_6","3_8"],["2_1","6_1","0_1","1_1","7_1"],["5_10","3_21"],["5_9","1_15","0_17"],["1_9","5_0"],["6_4","3_0","2_4"],["4_6","0_12","5_3"],["4_20","0_8","6_10","5_8","2_5","3_4"],["3_2","0_2","5_5"],["0_0","1_0","2_0","3_1","4_0","6_0","7_0"],["1_17","2_24","4_13","7_17"],["0_14","1_27","2_36","3_23","5_17","6_34","7_26"]], seed: ''}
    }};

    var settings = {highlight: true, friends: true, checks: true, initialGroups: [], seed: ''};


    // load images of all 162 properties and add then
    // to variable images
    $scope.numLoaded = 0;
    var images = [];

    // store seed element
    $scope.seed = {
        model: null,
        pos: null, // position of element after sorting based on similarity
        truepos: null // true position of the element, i.e. its index within the "models" array.
    };



    var traces = [];

    // track index of scroll buttons
    $scope.scroll = {counter: 0, max: modelWithMaxLength()};
    $scope.suggestions = {suggestionList: [], counter: -1};

    // check if played on mobile device
    var isMobile = false; //initiate as false
    if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)
        || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0,4))) isMobile = true;

    // store player traces
    var traces = [];

    var selectedModel;

    ///// end of initialization code and variables /////////


    // start game initialization
    getPrevSolution();

    //////////////// FUNCTIONS FOR GAME INIT ////////////
    function saveAttempt() {
        Restangular.all('/save_attempt').post({
            initialScore: initialScore,
            targetScore: $scope.target,
            seed: $scope.seed.model + '_' + $scope.seed.pos,
            level: level,
            type: seedType,
            fake: $scope.fake,
            leeway: $scope.leeway,
            isMobile: isMobile
        }).then((function (data) {
        }), function (err) {
        });
    }

    // score each element based on the most similar element from its tuple. Similarity of element
    // e is calculated by taking the score of the tuple formed by placing e in tuple ele
    function scoreByGroupSim(ele) {
        for (var i = 0; i < initialGroups.length; i ++) {
            var maxPairwiseScore = 0;
            // get max pairwise score
            for (var j = 0; j < initialGroups[i].length; j ++) {
                if (($scope.seed.model.toString() ==  initialGroups[i][j].split('_')[1])) {
                    continue;
                }

                var model = parseInt(initialGroups[i][j].split('_')[0]);
                var pos = $scope.getEleIndexWithPos(model, parseInt(initialGroups[i][j].split('_')[1]));

                var gr = ele.slice(0);
                gr.push(initialGroups[i][j]);
                var score = calculateGroupScore(gr);

                if (score > maxPairwiseScore) {
                    maxPairwiseScore = score;
                }
            }

            // assign all elements in group to have this score
            for (var j = 0; j < initialGroups[i].length; j ++) {
                var temp = initialGroups[i][j].split('_');
                var model = parseInt(temp[0]);
                var pos = $scope.getEleIndexWithPos(model, parseInt(temp[1]));

                models[model][pos].gscore = maxPairwiseScore;
            }
        }
    }

    // ele not true pos
    // score each element based on its similarity to elements in ele. Similarity of element
    // e is calculated by taking the score of the tuple formed by placing e in tuple ele
    function scoreByPairwiseSim(ele) {

        //  $scope.getEleIndexWithPos
        for (var i = 0; i < initialGroups.length; i ++) {
            var maxPairwiseScore = 0;
            // get max pairwise score
            for (var j = 0; j < initialGroups[i].length; j ++) {
                var model = parseInt(initialGroups[i][j].split('_')[0]);
                var pos = $scope.getEleIndexWithPos(model, parseInt(initialGroups[i][j].split('_')[1]));

                var gr = ele.slice(0);
                gr.push(initialGroups[i][j]);
                var score = calculateGroupScore(gr);

                models[model][pos].score = score;
            }

        }
    }

    // mulilate models array based on results of scoreByPairwiseSim()
    function sortByScore() {
        for (var model in models) {
            models[model].sort(function (a, b) {
                if (a.score < b.score)
                    return 1;
                if (a.score > b.score)
                    return -1;
                return 0;
            });
        }
    }

    $scope.getEleIndexWithPos = function(model, pos) {
        var curModel = models[model];

        if (!curModel){
            console.log("");
        }

        for (var i = 0; i < curModel.length; i ++) {
            if (curModel[i].pos == pos) {
                return i;
            }
        }
    };

    function mapModels() {
        var res2 = 0;
        var res = {};

        for (var model in models) {
            var curRes = [];
            var curModel = models[model];

            for (var i = 0; i < curModel.length; i ++) {

                res2 = res2 + 1;

             //   console.log(res2);

                curRes.push({pos: i, props: curModel[i], score: 0, color: null});
            }
            res[model] = curRes;
        }

        return res;
    }


    function setAlpha() {
        var alpha = [];

        for (var i = 1; i <= 162; i ++) {
            alpha.push({prop: i, count: 0});
        }

        return alpha;
    }

    // start game initial configuration
    function buildSuggestions() {
        $scope.suggestions.suggestionList = [];

        var groups = initialGroups;
        for (var group = 0; group < groups.length; group ++) {
            // get an ele from this group, doesn't matter which so just pick first
            var ele = groups[group][0];
            var temp = ele.split('_');
            var model = parseInt(temp[0]);
            var pos = parseInt(temp[1]);
            var ind = $scope.getEleIndexWithPos(model, pos);
            var score = models[model][ind].gscore;

            if (score > 0 && groups[group].length > 0) {
                $scope.suggestions.suggestionList.push({score: score, group: groups[group]});
            }
        }

        // sort suggestions by score
        $scope.suggestions.suggestionList.sort(function (a, b) {
            if (a.score < b.score)
                return 1;
            if (a.score > b.score)
                return -1;
            return 0;
        });

        // swap($scope.suggestions.suggestionList, 0, $scope.suggestions.suggestionList.length - 1);
    }

    $scope.getSuggestion = function (dir) {
        addTrace('s' + dir);

        // get a suggestion based on counter value

        if (dir == '-') { // check if can still move (i.e. there are still elements to be seen in dir -)
            if ($scope.suggestions.counter < 0) {
                $scope.suggestions.counter = $scope.suggestions.suggestionList.length - 1;
            } else {
                $scope.suggestions.counter--;
            }
        } else if (dir == '+') { // check if can still move (i.e. there are still elements to be seen in dir +)
            if ($scope.suggestions.counter >= $scope.suggestions.suggestionList.length - 1) {
                $scope.suggestions.counter = -1;
            } else {
                $scope.suggestions.counter++;
            }
        }

        if ($scope.suggestions.counter == -1) {
            var group = [];
            for (var model in models) {
                var ele = model + '_' + models[model][0].pos;
                group.push(ele);
            }
        } else {
            var group = $scope.suggestions.suggestionList[$scope.suggestions.counter].group;
        }

        for (var ele = 0; ele < group.length; ele ++) {
            var temp = group[ele].split('_');
            var model = parseInt(temp[0]);
            if (positions[model].selected == -1) {
                var pos = parseInt(temp[1]);

                positions[model].truepos = pos;
                positions[model].pos = $scope.getEleIndexWithPos(model, pos);

            }
        }

        // now redraw everything
        redraw();

    };


    $scope.toggleModelReorder = function (model) {
        if (positions[model].reorder == 1) {
            positions[model].reorder = -1;
            $('#reorder_' + model).removeClass('green');

            addTrace('t' + model + '_' + positions[model].truepos + '-');
        } else if (positions[model].reorder == -1) {
            positions[model].reorder = 1;
            $('#reorder_' + model).addClass('green');
            addTrace('t' + model + '_' + positions[model].truepos + '+');

        }

        $scope.reorder();
        redraw();
    };

    $scope.reorder = function() {
        var ele = [];
        for (var model in positions) {
            if (positions[model].selected == 1 && positions[model].reorder == 1) {
                ele.push(model + '_' + positions[model].truepos);
            }
        }

        scoreByGroupSim(ele);
        scoreByPairwiseSim(ele);
        sortByScore();
        buildSuggestions();

        for (var model in positions) {
            positions[model].pos = $scope.getEleIndexWithPos(model, positions[model].truepos);
        }

        // reset suggestion counter
        $scope.suggestions.counter = -1;
        $scope.scroll.counter = 0;

        // redraw and reset position index to 0
        var group = [];
        for (var model in models) {
            var ele = model + '_' + models[model][0].pos;
            group.push(ele);
        }

        for (var ele = 0; ele < group.length; ele ++) {
            var temp = group[ele].split('_');
            var model = parseInt(temp[0]);
            if (positions[model].selected == -1) {
                var pos = parseInt(temp[1]);

                positions[model].truepos = pos;
                positions[model].pos = $scope.getEleIndexWithPos(model, pos);

            }
        }

    };

    function setLeeway() {
        if ($scope.fake) {
            $scope.leeway = Math.random();
        }
    }

    function start() {

        if ($scope.tutorial.info[$scope.tutorial.sucAttempts]) {
            level = 1;
            $scope.tutorial.show = true;
            positions = hospitalPos;
            $scope.modelNames = [0, 1, 2, 3, 4, 5, 6, 7];

            settings = $scope.tutorial.info[$scope.tutorial.sucAttempts];
            initialGroups = settings.initialGroups;
            models = hospital;

            models = mapModels();
            $scope.models = models;
            $scope.fake = true; // to specify whether level is fake level. not used at the moment.
            $scope.leeway = 1.0; // not used at the moment
            // names of each model
            $scope.modelNames = shuffle($scope.modelNames); // randomize the order for which models appear in game
            $scope.positions = positions;
        }

        // fake level?
        $scope.fake = false;

        // set initial score
        initialScore = calculateOverallScore([], initialGroups);

        // get a seed
        if ($scope.tutorial.info[$scope.tutorial.sucAttempts]) {
            var ele = settings.seed.split('_');
            $scope.seed.model = parseInt(ele[0]);
            $scope.seed.truepos = parseInt(ele[1]);

            positions[$scope.seed.model].truepos = $scope.seed.truepos;

            // select the model
            toggleModel($scope.seed.model, true);
            // hide the scroll buttons for that model
            // $('.scroll_' + $scope.seed.model.toString()).hide();
            // now assign it as first element in array
            swap($scope.modelNames, $scope.modelNames.indexOf($scope.seed.model), 0);


        } else {
            getSeed();
            addSeed($scope.seed.model + '_' +  $scope.seed.truepos);
        }

        // set target score
        var curGroups = getCurGroupAsArray();

        $scope.target = Math.ceil(initialScore - calculateOverallScore(curGroups, initialGroups) + 1);
        $scope.seed.pos = positions[$scope.seed.model].pos = $scope.getEleIndexWithPos($scope.seed.model, $scope.seed.truepos);

        assignColors(); // don't need to use trupos because this is prior to sorting


        $scope.toggleModelReorder($scope.seed.model);

        // redraw everything
        redraw();

        saveAttempt();

        $('#loading').fadeOut();

        // if (!$scope.fake) {
        //     powerRound();
        // }
    }

    // notify player that this is a power round
    function powerRound() {
        $('#power').fadeIn();
        setTimeout(function(){ $('#power').fadeOut(); }, 3000);
    }

    function assignColors() {
        var hues = ['yellow', 'red', 'green', 'orange', 'blue', 'purple', 'pink'];
        var cols = randomColor({
            count: 400,
            luminosity: 'bright',
            format: 'hex'
        });

       //console.log(cols.join("','"));

        for (var i = 0; i < initialGroups.length; i ++) {
            var group = initialGroups[i];


            for (var j = 0; j < group.length; j ++) {
                var temp = group[j].split('_');
                var model = parseInt(temp[0]);
                var ele = parseInt(temp[1]);

                models[model][ele].color = cols[i];
            }
        }
    }

    function restartSeeds() {
        prevSeeds = [];
    }

    function saveSeed() {
        Restangular.all('/save_seed').post({
            seed: prevSeeds,
            level: level
        }).then((function (data) {
        }), function (err) {
        });
    }

    function addSeed(ele) {
        prevSeeds.push(ele);
    }


    function getSeed() {
        // if (tut >= 5) { // seed by size
            seedType = 'size';
            var smallestGroup = getSmallestArray(initialGroups, prevSeeds);

            if (smallestGroup.length == 0) { // if no smallest group => all seeds rotated through so start over
                restartSeeds();
                smallestGroup = getSmallestArray(initialGroups, prevSeeds);
            }

            if (smallestGroup.length == 0) {
                seedType = 'ran';

                $scope.seed.model = getRandomInt(0, $scope.modelNames.length);
                $scope.seed.truepos = getRandomInt(0, models[$scope.seed.model].length - 1);
            } else {
                var ranInt = getRandomInt(0, smallestGroup.length - 1);
                var ele = smallestGroup[ranInt];
                ele = ele.split('_');

                $scope.seed.model = parseInt(ele[0]);
                $scope.seed.truepos = parseInt(ele[1]);
            }


        // }
            // else if (tut < 5) {
        //     var temp = tutSeed.split('_');
        //     $scope.seed.model = parseInt(temp[0]);
        //     $scope.seed.truepos = parseInt(temp[1]);
        // }
        //     else { // seed randomly
        //         seedType = 'ran';
        //         $scope.seed.model = getRandomInt(0, 7);
        //         $scope.seed.truepos = getRandomInt(0, models[$scope.seed.model].length - 1);
        // }

        positions[$scope.seed.model].truepos = $scope.seed.truepos;

        // select the model
        toggleModel($scope.seed.model, true);
        // hide the scroll buttons for that model
        // $('.scroll_' + $scope.seed.model.toString()).hide();
        // now assign it as first element in array
        swap($scope.modelNames, $scope.modelNames.indexOf($scope.seed.model), 0);


        // save seed to database
        if (!$scope.fake) {
            saveSeed();
        }
    }

    function getPrevSolution() {
        Restangular.one('/get_best_solution/' + level.toString())
            .get().then(function (serverJson) {
            initialGroups = serverJson.solution.solution;
            prevSeeds = serverJson.prevSeeds.prevSeeds;
            // tut = serverJson.attempts;
            // tutSeed = serverJson.solution.seed;

            $scope.tutorial.attempts = serverJson.attempts;
            $scope.tutorial.sucAttempts = serverJson.sucAttempts;



            loadImages();

        });
    }


    function loadImages() {
        for (var i = 1; i <= 162; i ++) {
            var img = new Image();
            img.onload = function() {
                $scope.numLoaded++;
                if ($scope.numLoaded == 162) {
                    start(); //start game when all images have loaded
                }
            };
            img.src = 'https://chrchung.github.io/Creatures/' + i + '.png';
            img.width = dim;
            img.height = dim;
            images.push(img);
        }
    }
    //////////////// END FUNCTIONS FOR GAME INIT ///////////


    ////////////// USER ACTION FUNCTIONS ///////////////
    $scope.giveup = function () {
        Restangular.all('/give_up').post({
            duration: (new Date()).getTime() - startTime
        }).then((function (data) {
            $state.reload();
        }), function (err) {
        });
    };



    // rotate through models
    $scope.getNextAll = function(dir) {
        addTrace('n' + dir);

        if ($scope.scroll.max == -1) {
            return;
        }

        var start = allAtBound(true);
        var end = allAtBound(false);

        if (start && dir == '-') {
            $scope.scroll.counter = models[$scope.scroll.max].length - 1;
        } else if (end && dir == '+') {
            $scope.scroll.counter = 0;
        } else if (dir == '-') {
            $scope.scroll.counter --;
        } else {
            $scope.scroll.counter ++;
        }

        for (var model in models) {
            if (positions[model].selected == -1) {
                if (dir == '-') { // check if can still move (i.e. there are still elements to be seen in dir -)
                    if (positions[model].pos <= 0) {
                        if (start) {
                            positions[model].pos = models[model].length - 1;
                        }
                    } else {
                        positions[model].pos--;
                    }
                } else if (dir == '+') { // check if can still move (i.e. there are still elements to be seen in dir +)
                    if (positions[model].pos >= models[model].length - 1) {
                        if (end) {
                            positions[model].pos = 0;
                        }
                    } else {
                        positions[model].pos++;
                    }
                }

                $scope.getNext(model, 'preset');
            }
        }

        addTrace('getNextAll');
    };



    // get next element in model, given dir
    // if dir == + (then move up the list)
    // if dir == - (then move down the list)
    // if dir == 0 (don't move, but update the highlighted properties -- need to do this
    // if new elements gets added or removed from the list)
    $scope.getNext = function (model, dir) {

        var prevPos = positions[model].pos;

        if (dir == '-') { // check if can still move (i.e. there are still elements to be seen in dir -)
            if (positions[model].pos <= 0) {
                positions[model].pos = models[model].length - 1;
            } else {
                positions[model].pos--;

            }
        } else if (dir == '+') { // check if can still move (i.e. there are still elements to be seen in dir +)
            if (positions[model].pos >= models[model].length - 1) {
                positions[model].pos = 0;
            } else {
                positions[model].pos++;
            }
        } else if (dir == '0' || dir == 'preset') {

        } else { // can't move, so don't do anything
            return;
        }


        // draw this element again, get its properties
        // var props = models[model][pos % models[model].length];
        var props = (models[model][positions[model].pos]).props;

        var ind = models[model][positions[model].pos].pos;
        positions[model].truepos = ind;

        if (!settings.checks) {
            $('.check').hide();
        }


        if (settings.highlight) {
            draw(props, true, document.getElementById('model_' + model), model);
        } else {
            draw(props, false, document.getElementById('model_' + model), model);
        }


        if (settings.friends) {
            drawFriendBar(model, true, document.getElementById('friend_bar_' + model));
        } else {
            drawFriendBar(model, false, document.getElementById('friend_bar_' + model));

        }

        if (settings.friends) {
            drawContBar(model, true, document.getElementById('cont_bar_' + model));
        } else {
            drawContBar(model, false, document.getElementById('cont_bar_' + model));

        }



        drawSuggestBar(model, document.getElementById('suggest_bar_' + model));

        // redraw all other elements, if element changed (i.e. if dir != '0')
        // and model is selected
        if (dir != '0' && positions[model].selected > -1) {
            redraw();
        }
    };

    // toggle the selection
    $scope.select = function (model) {

        selectedModel = model;

        // can't deselect seed
        if ($scope.seed.model == model) {
            return;
        }

        toggleModel(model, false);

        addTrace('s' + model + '_' + positions[model].truepos);

    };


    function toggleModel (model, init) {
        if (positions[model].selected == 1) {
            positions[model].selected = -1;
            $('#suggest_bar_' + model).removeClass('selected');

            if (positions[model].reorder == 1) {
                positions[model].reorder = -1;

                $('#reorder_' + model).removeClass('green');
            }

            $('#reorder_' + model).css({"visibility":"hidden"});


        } else if (positions[model].selected == -1) {
            positions[model].selected = 1;
            $('#suggest_bar_' + model).addClass('selected');
            $('#reorder_' + model).css({"visibility":"visible"});
        }

        $scope.scroll.max = modelWithMaxLength();

        if (!init) {
            redraw();
        }
    }


    // level 1 = hospital model
    $scope.submitScore = function () {
        var cur = getCurGroupAsArray();
        var solution = getGroupsExclude(cur, initialGroups);
        solution = solution.concat([cur]);

        Restangular.all('/save_solution').post({
            score: calculateOverallScore(cur, initialGroups),
            initialScore: initialScore,
            targetScore: $scope.target,
            seed: $scope.seed.model + '_' + $scope.seed.pos,
            duration: (new Date()).getTime() - startTime,
            level: level,
            solution: solution,
            type: seedType,
            fake: $scope.fake,
            isMobile: isMobile
        }).then((function (data) {
            Restangular.one('/cur_user').get().then(function (serverJson) {
                $scope.cond = serverJson.condition;

                getScoreBoard();

                if (serverJson.user.startsWith('guest')) {
                    $scope.end = 1;
                } else {
                    $scope.end = 2;
                }


                Restangular.all('/save_trace').post({
                    score: calculateOverallScore(cur, initialGroups),
                    initialScore: initialScore,
                    targetScore: $scope.target,
                    seed: $scope.seed.model + '_' + $scope.seed.pos,
                    duration: (new Date()).getTime() - startTime,
                    level: level,
                    solution: solution,
                    type: seedType,
                    fake: $scope.fake,
                    isMobile: isMobile,
                    traces: traces
                }).then((function (data) {

                }), function (err) {
                });
            });
        }), function (err) {
        });
    };

    $scope.reload = function() {
        $state.reload();
    };

    ////////// END USER ACTION FUNCTIONS /////////////


    //////// SCORE CALCULATION FUNCTIONS //////////////
    // update new element from model
    // either add to the current group or
    // remove it from the current group
    // depending on state.
    function getScoreBoard () {
        Restangular.one('/get_scoreboard').get().then(function (serverJson) {
            $scope.scores = serverJson.scores;
            $scope.overallScore = serverJson.overallScore;
            $scope.overallScoreRank = serverJson.rank;

            Restangular.one('/get_performance').get().then(function (serverJson) {
                $scope.performance = serverJson;
            });

        });
    }

    function updateScore() {
        var pre = $scope.score;
        var curGroup = getCurGroupAsArray(positions);

        $scope.score = calculateOverallScore(curGroup, initialGroups) - initialScore + $scope.target - 1;

       var scoreChange =  $scope.score - pre;

        if (scoreChange > 0) {
            var pos = $('#suggest_bar_' + selectedModel).position();

            var feedback = $("<div></div>");
            feedback.text(scoreChange);
            feedback.css({'color': '#45b68a',
                'font-size': '25px',
                'font-family': 'lovelo',
                'display': 'none',
                'position': 'absolute',
                'top': pos.top.toString() + 'px',
                'left': '+' + (pos.left + Math.random() * 300).toString() + 'px'
            });

            $('body').append(feedback);
            feedback.fadeIn().delay(50).fadeOut();
            setTimeout(function(){ feedback.remove() }, 500);

        } else if (scoreChange < 0) {
            var pos = $('#suggest_bar_' + selectedModel).position();


            var feedback = $("<div></div>");
            feedback.text(scoreChange);
            feedback.css({'color': '#fc3d5d',
                'font-size': '25px',
                'font-family': 'lovelo',
                'display': 'none',
                'position': 'absolute',
                'top': pos.top.toString() + 'px',
                'left': (pos.left  + Math.random() * 300).toString() + 'px'
            });

            $('body').append(feedback);
            feedback.fadeIn().delay(50).fadeOut();
            setTimeout(function(){ feedback.remove() }, 300);

        }



        if ($scope.score >= $scope.target * $scope.leeway && $scope.target != 0) {
            endGame();
        }

    }

    function endGame() {
        $scope.end = 4; // add overlay
        $scope.submitScore();
    }

    $scope.signup = function() {
        Restangular.all('/signup').post($scope.user).then((function (data) {
            $scope.taken =  false;
            if (data == 'taken') {
                $scope.taken = true;
            } else {
                $scope.end = 3;
            }

        }), function (err) {

        });


    };

    // return whether thisEle is in current solution
    // by iterating through curSol
    function inSolution(thisEle) {
        for (var group = 0; group < initialGroups.length; group ++) {
            for (var ele = 0; ele < group.length; ele ++) {
                if (initialGroups[group][ele] == thisEle) {
                    return true;
                }
            }
        }
        return false;
    }

    function getCurGroupAsArray() {
        var res = [];
        for (var model in positions) {
            if (positions[model].selected == 1) {
                res.push(model + '_' + positions[model].truepos);
            }
        }
        return res;
    }

    // get initial group excluding those in a
    function getGroupsExclude(a, groups) {
        var newGroup = [];
        for (var group = 0; group < groups.length; group ++) {
            var excludeDupes = removeDupes(groups[group], a);
            if (excludeDupes.length > 0) {
                newGroup.push(excludeDupes);
            }
        }

        return newGroup;
    }

    // calculate overall score, with new group: eles
    function calculateOverallScore (eles, groups) {
        var score = 0;

        if (eles.length == 0 && groups.length == 0) {
            return score;
        }

        // group to calculate score by removing elements belonging to eles first
        var groups = getGroupsExclude(eles, groups);
        // add current group
        groups = groups.concat([eles]);

        // get score of all other groups
        for (var group = 0; group < groups.length; group ++) {
            score += calculateGroupScore(groups[group]);
            // console.log(groups[group] + ': ' + calculateGroupScore(groups[group]) * 10000);
        }

        return Math.round(score * 10000);
    }

    function propDistInGroup(group) {
        var propDist = {};

        // iterate through each element
        // then iterate through each prop in each element
        // if prop not already in the dict, add it
        // else, increment the number of elements by one
        for (var i = 0; i < group.length; i ++) {
            var ele = group[i].split('_');
            var model = parseInt(ele[0]);
            var pos = parseInt(ele[1]);

            var ind = $scope.getEleIndexWithPos(model, pos);

            var temp = models[model][ind].props;
            // console.log(props);
            var props = temp.filter (function (value, index, array) {
                return array.indexOf (value) == index;
            });

            for (var prop = 0; prop < props.length; prop ++) {
                if (propDist[props[prop]] == null) {
                    propDist[props[prop]] = 1;
                } else {
                    propDist[props[prop]] ++;
                }
            }
        }
        // console.log(propDist);

        return propDist;
    }

    function calculateGroupScore(group) {
        var score = 0;
        var pi_t;
        var n_squared = Math.pow(Object.keys(models).length, 2);
        var m = group.length;

        var propDist = propDistInGroup(group);
        pi_t = Object.keys(propDist).length;

        if (pi_t == 0) {
            return 0;
        }

        for (var j = 2; j <= m; j ++) {
            var n_p_j = 0;

            for (var prop in propDist) {
                if (propDist[prop] == j) {
                    n_p_j ++;
                }
            }
            score = score + j * j * n_p_j;
        }

        return score / (n_squared * pi_t);
    }

    // add props to alpha if add = true, else remove props from alpha
    function updateAlpha(props, alpha) {
        for (var i = 0; i < props.length; i++) {
            var curProp = props[i];

            if (alpha[curProp]) {
                alpha[curProp]++;
            } else {
                alpha[curProp] = 1;
            }
        }
    }

    // calculate opacity of blue highlight. opacity is calculated as follows:
    // get total occurrence of each property in the current tuple being formed,
    // sort the properties by # of occurrences in descending order
    // opacity  of element = (total number of elements - element's position) / total number of elements
    function getAlphas() {
        var alpha = {};
        var ord;

        for (var model in positions) {
            if (positions[model].selected > -1) {
                var props = models[model][positions[model].pos].props;
                updateAlpha(props, alpha);
            }
        }

        ord = Object.keys(alpha).map(function(key) {
            return alpha[key];
        });
        ord.sort(function(a, b){return b - a});

        var uniqueOrds = [];

        $.each(ord, function(i, el){
            if($.inArray(el, uniqueOrds) === -1) uniqueOrds.push(el);
        });

        return {alpha: alpha, ord: uniqueOrds};
    }

    // get elements contribution to global score
    function getEleContribution(ele) {
        var temp = ele.split('_');
        var model = parseInt(temp[0]);

        if ($scope.seed.model == model && $scope.seed) {
            return $scope.score / ($scope.target * $scope.leeway);
        }

        var curGroup = getCurGroupAsArray(positions);
        var scoreWithEle = calculateOverallScore(curGroup, initialGroups);


        var ex = getGroupsExclude([ele], [curGroup])[0] || [];

        if (positions[model].selected == - 1) {
            var scoreWithoutEle = calculateOverallScore(ex, getGroupsExclude([ele], initialGroups));

        } else {
            var scoreWithoutEle = calculateOverallScore(ex, initialGroups);
        }

        return (scoreWithEle - scoreWithoutEle) / 1000;
    }


    ////// END OF SCORE CALCULATION FUNCTIONS //////////


    ////// GAME SCREEN FUNCTIONS /////////

    // update the highlighted elements and update the score
    // gets called after a new element gets added/removed from the
    // group
    function redraw() {
        // update score
        updateScore();
        // update contributions of each element
        // updateContributions();

        // redraw elements
        for (var model in models) {
            $scope.getNext(model, '0');
        }
    }

    // draw contribution bar
    function drawContBar(model, show, c) {
        var cont = getEleContribution(model + '_' + positions[model].truepos);
        var eles = document.getElementById('model_' + model);

        var con = c.getContext('2d');
        c.height = dim;
        c.width = 10 + eles.width;
        con.drawImage(eles, 10, 0);

        if (show) {
            if (positions[model].selected == -1) {
                con.fillStyle = 'red';
                con.fillRect(0, 0, 5, dim);
                var fillWidth = 120 - Math.round(dim * cont); // +
                con.fillStyle = '#cee1ff';
                con.fillRect(0, 0, 5, fillWidth);
            } else {
                con.fillStyle = 'red';
                con.fillRect(0, 0, 5, dim);
                var fillWidth = 120 - Math.round(dim * cont);
                con.fillStyle = '#cee1ff';
                con.fillRect(0, 0, 5, fillWidth);
            }
        }

    }


    function drawFriendBar(model, show, c) {
        var eles = document.getElementById('cont_bar_' + model);

        var con = c.getContext('2d');
        c.height = dim;
        c.width = 30 + eles.width;
        con.fillStyle = "white";

        con.drawImage(eles, 0, 0);
        if ($scope.seed.model == model && $scope.seed.pos == positions[model].pos || models[model][positions[model].pos].color == null) {
        } else if (show) {
            con.fillStyle = models[model][positions[model].pos].color;
        }

        con.fillRect(eles.width + 5, 0, 30, dim);
    }



    function drawSuggestBar(model, c) {
        var eles = document.getElementById('friend_bar_' + model);

        var con = c.getContext('2d');
        c.height = dim;
        c.width = 10 + eles.width;

        con.drawImage(eles, 0, 0);

        var ind = $scope.suggestions.counter;
        if (ind == -1) {
            return;
        }

        var group = $scope.suggestions.suggestionList[ind].group;
        var isFriend = isInList(group, [model + '_' + positions[model].truepos]);

        if (isFriend && (model + '_' + positions[model].truepos != ($scope.seed.model + '_' + $scope.seed.truepos))) {
            con.fillStyle = 'black';
        } else {
            con.fillStyle = 'white';
        }

        con.fillRect(eles.width + 5, 0, 5, dim);
    }



    // draw properties onto canvas c
    // also pass in the model that element
    // belongs to since we don't include it as
    // a common property
    function draw(props, highlight, c, model) {

        var alphas = getAlphas();

        props.sort();
        var con = c.getContext('2d');
        c.height = dim;
        c.width = dim * props.length;
        con.clearRect(0, 0, c.width, c.height);


        // highlight properties (i.e. fill cell with yellow bg) that are similar to current group
        for (var i = 0; i < props.length; i ++) {
            var count = alphas.alpha[props[i]];

            if (highlight && (count > 1  || (count == 1 && positions[model].selected == -1))) {
                var op = (alphas.ord.length - alphas.ord.indexOf(count)) / alphas.ord.length;

                con.rect(i*dim, 0, dim, dim);
                con.fillStyle = 'rgba(0, 242, 255,' + (op).toString() + ')';
                con.fill();
            }
        }


        // draw all the creature images
        for (var i = 0; i < props.length; i ++) {
            con.drawImage(images[props[i] - 1], 0, 0, 120, 120, i*dim, 0, dim, dim);
        }
    }

    // get a list of common properties in currently selected group and
    // element, returns a list of them
    function getCommonProps(model, a) {
        var common = {};

        for (var i = 0; i < a.length; i ++) {
            common[a[i]] = 0;
        }

        for (var key in positions) {
            if (model != key && positions[key].selected != -1) {
                for (var i = 0; i < a.length; i ++) {
                    if (isInList(models[key][positions[key].pos].props, a[i])) {
                        common[a[i]] = common[a[i]] + 1;
                    }

                }
            }
        }
        return common;
    }
    /////// END OF GAME SCREEN FUNCTIONS ////////

    ////////////// HELPER FUNCTIONS //////////////
    function isInList(a, b) {
        for (var i = 0; i < a.length; i ++) {
            if (a[i] == b) {
                return true;
            }
        }
        return false;
    }

    function isInListCountNumTimes(a, b) {
        var count = 0;
        for (var i = 0; i < a.length; i ++) {
            if (a[i] == b) {
                count ++;
            }
        }
        return count;
    }


    // remove any occurrences of a2 from a1.
    function removeDupes(a1, a2) {
        var res = [];
        for (var i = 0; i < a1.length; i ++) {
            if (!isInList(a2, a1[i])) {
                res.push(a1[i]);
            }
        }
        return res;
    }

    function hasClass(element, cls) {
        return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;
    }

    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // get smallest array in an array of arrays
    function getSmallestArray(a, exclude) {
        var index = -1;
        var minLen = 10000;

        for (var i = 0; i < a.length; i ++) {
            // if min length and none of its elements are in exclude
            if (a[i].length < minLen) {
                var isValid = true;
                for (var j = 0; j < a[i].length; j ++) {
                    if (isInList(exclude, a[i][j])) {
                        isValid = false;
                    }
                }

                if (isValid) {
                    index = i;
                    minLen = a[i].length;
                }
            }
        }

        return a[index] || [];
    }

    function shuffle(array) {
        var currentIndex = array.length, temporaryValue, randomIndex;

        // While there remain elements to shuffle...
        while (0 !== currentIndex) {

            // Pick a remaining element...
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex -= 1;

            // And swap it with the current element.
            temporaryValue = array[currentIndex];
            array[currentIndex] = array[randomIndex];
            array[randomIndex] = temporaryValue;
        }

        return array;
    }

    function swap(array, a, b) {
        var temp = array[a];
        array[a] = array[b];
        array[b] = temp;
    }

    function getIndexOfItem(item, name, obj) {
        for (var i = 0; i < obj.length; i ++) {
            if (obj[i][name] == item) {
                return i;
            }
        }

        return -1;
    }

    // return the unselected model with maximum size
    function modelWithMaxLength() {
        var max = -1;
        for (var model in models) {
            if (positions[model].selected == 1) {
                continue;
            }
            max = (max == - 1 || models[model].length > models[max].length) ? model : max;
        }

        return max;
    }

    // check if all unselected row are at index 0 or last index
    function allAtBound(start) {
        for (var model in models) {
            if ($scope.seed.model == model) {
                continue;
            }

            if (start && positions[model].selected == -1 && positions[model].pos != 0) {
                return false;
            } else if (!start && ($scope.scroll.max == - 1 || positions[$scope.scroll.max].pos != models[$scope.scroll.max].length - 1)) {
                return false;
            }
        }

        // // dont scroll if all selected
        for (var model in models) {
            if (positions[model].selected == -1) {
                return true;
            }
        }

        return false;
    }

    ///////////// END HELPER FUNCTIONS /////////////

    ///// PLAYER TRACES /////////

    function addTrace(s) {

        var cur = getCurGroupAsArray();

        traces.push(s);

        if (traces.length == 30) {
            Restangular.all('/save_trace').post({
                score: calculateOverallScore(cur, initialGroups),
                initialScore: initialScore,
                targetScore: $scope.target,
                seed: $scope.seed.model + '_' + $scope.seed.pos,
                duration: (new Date()).getTime() - startTime,
                level: level,
                solution: solution,
                type: seedType,
                fake: $scope.fake,
                isMobile: isMobile,
                trace: traces
            }).then((function (data) {

            }), function (err) {
            });


        }

    }

    //// END PLAYER TRACES ////////


    ///// TUTORIAL STUFF //////


    $scope.next = function(state) {

        if (state == '+') {
            $scope.tutorial.state ++;
        } else {
            $scope.tutorial.state = state;
        }

        if ($scope.tutorial.state > $scope.tutorial.info[$scope.tutorial.sucAttempts].numStates) {
            $scope.tutorial.show = false;
        }


    };

    $scope.Math = window.Math;

    // Restangular.one('/cur_user').get().then(function (serverJson) {
    //     $scope.cond = serverJson.condition;
    //
    //     getScoreBoard();
    //
    //     if (serverJson.user.startsWith('guest')) {
    //         $scope.end = 1;
    //     } else {
    //         $scope.end = 2;
    //     }
    // });
    //
    //
    // Restangular.one('/get_scoreboard').get().then(function (serverJson) {
    //     $scope.scores = serverJson.scores;
    //     $scope.overallScore = serverJson.overallScore;
    //     $scope.overallScoreRank = serverJson.rank;
    //
    //     Restangular.one('/get_performance').get().then(function (serverJson) {
    //         $scope.performance = serverJson;
    //     });
    //
    // });
});
